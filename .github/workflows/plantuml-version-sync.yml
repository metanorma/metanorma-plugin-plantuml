name: PlantUML Version Sync

on:
  schedule:
    # Check for new PlantUML releases daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    # Allow manual triggering

env:
  VERSION_FILE: lib/metanorma/plugin/plantuml/version.rb
  JAR_FILE: data/plantuml.jar
  TEST_DIAGRAM: test_diagram.puml
  PLANTUML_REPO: plantuml/plantuml

jobs:
  check-plantuml-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Get current PlantUML version
        id: current-version
        run: |
          CURRENT_VERSION=$(ruby -e "load '${{ env.VERSION_FILE }}'; puts Metanorma::Plugin::Plantuml::PLANTUML_JAR_VERSION")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current PlantUML version: $CURRENT_VERSION"

      - name: Get latest PlantUML release
        id: latest-version
        run: |
          echo "Fetching latest PlantUML release information..."
          RELEASE_DATA=$(curl -s --fail https://api.github.com/repos/${{ env.PLANTUML_REPO }}/releases/latest)
          [ $? -eq 0 ] || { echo "Failed to fetch release data from GitHub API"; exit 1; }

          LATEST_VERSION=$(echo "$RELEASE_DATA" | jq -r .tag_name | sed 's/^v//')
          RELEASE_URL=$(echo "$RELEASE_DATA" | jq -r .html_url)

          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
          echo "Latest PlantUML version: $LATEST_VERSION"
          echo "Release URL: $RELEASE_URL"

      - name: Compare versions and validate update
        id: compare
        run: |
          CURRENT="${{ steps.current-version.outputs.version }}"
          LATEST="${{ steps.latest-version.outputs.version }}"

          echo "Comparing versions: $CURRENT vs $LATEST"

          if [ "$CURRENT" != "$LATEST" ]; then
            SHOULD_UPDATE=$(ruby -e "
              require 'rubygems'
              puts Gem::Version.new('$LATEST') > Gem::Version.new('$CURRENT')
            ")

            if [ "$SHOULD_UPDATE" = "true" ]; then
              echo "needs_update=true" >> $GITHUB_OUTPUT
              echo "✅ Update needed: $CURRENT → $LATEST"
            else
              echo "needs_update=false" >> $GITHUB_OUTPUT
              echo "⚠️  Latest version ($LATEST) is not newer than current ($CURRENT)"
            fi
          else
            echo "needs_update=false" >> $GITHUB_OUTPUT
            echo "✅ PlantUML version is up to date"
          fi

      - name: Validate PlantUML release and download URL
        if: steps.compare.outputs.needs_update == 'true'
        id: validate-release
        run: |
          NEW_VERSION="${{ steps.latest-version.outputs.version }}"
          DOWNLOAD_URL="https://github.com/${{ env.PLANTUML_REPO }}/releases/download/v${NEW_VERSION}/plantuml-${NEW_VERSION}.jar"

          echo "Validating download URL: $DOWNLOAD_URL"

          if curl --output /dev/null --silent --head --fail "$DOWNLOAD_URL"; then
            echo "✅ Download URL is accessible"
            echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT

            FILE_SIZE=$(curl -sI "$DOWNLOAD_URL" | grep -i content-length | awk '{print $2}' | tr -d '\r')
            echo "Expected file size: $FILE_SIZE bytes"
            echo "file_size=$FILE_SIZE" >> $GITHUB_OUTPUT
          else
            echo "❌ Download URL is not accessible: $DOWNLOAD_URL"
            echo "This might be a temporary issue or the release assets are not ready yet."
            exit 1
          fi

      - name: Create backup and update files
        if: steps.compare.outputs.needs_update == 'true'
        id: update-files
        run: |
          # Create backups
          echo "Creating backup of current files..."
          cp ${{ env.VERSION_FILE }} ${{ env.VERSION_FILE }}.backup
          [ -f ${{ env.JAR_FILE }} ] && cp ${{ env.JAR_FILE }} ${{ env.JAR_FILE }}.backup

          # Update PlantUML version
          NEW_VERSION="${{ steps.latest-version.outputs.version }}"
          echo "Updating PLANTUML_JAR_VERSION to: $NEW_VERSION"
          sed -i "s/PLANTUML_JAR_VERSION = \".*\"/PLANTUML_JAR_VERSION = \"$NEW_VERSION\"/" ${{ env.VERSION_FILE }}

          # Verify PlantUML version update
          UPDATED_VERSION=$(ruby -e "load '${{ env.VERSION_FILE }}'; puts Metanorma::Plugin::Plantuml::PLANTUML_JAR_VERSION")
          [ "$UPDATED_VERSION" = "$NEW_VERSION" ] || { echo "❌ Version file update failed"; exit 1; }
          echo "✅ PlantUML version updated successfully"

          # Update gem version
          CURRENT_GEM_VERSION=$(ruby -e "load '${{ env.VERSION_FILE }}'; puts Metanorma::Plugin::Plantuml::VERSION")
          NEW_GEM_VERSION=$(ruby -e "
            require 'rubygems'
            current = Gem::Version.new('$CURRENT_GEM_VERSION')
            segments = current.segments.dup
            segments[2] = (segments[2] || 0) + 1
            puts segments.join('.')
          ")

          echo "Updating gem version: $CURRENT_GEM_VERSION → $NEW_GEM_VERSION"
          sed -i "s/VERSION = \".*\"/VERSION = \"$NEW_GEM_VERSION\"/" ${{ env.VERSION_FILE }}

          # Verify gem version update
          UPDATED_GEM_VERSION=$(ruby -e "load '${{ env.VERSION_FILE }}'; puts Metanorma::Plugin::Plantuml::VERSION")
          [ "$UPDATED_GEM_VERSION" = "$NEW_GEM_VERSION" ] || { echo "❌ Gem version update failed"; exit 1; }
          echo "✅ Gem version updated successfully"
          echo "new_gem_version=$NEW_GEM_VERSION" >> $GITHUB_OUTPUT

      - name: Download and validate new JAR
        if: steps.compare.outputs.needs_update == 'true'
        run: |
          echo "Installing bundle dependencies..."
          bundle install --jobs 4 --retry 3

          echo "Removing old JAR and downloading new one..."
          rm -f ${{ env.JAR_FILE }}
          bundle exec rake download_jar

          # Verify download completed
          [ -f ${{ env.JAR_FILE }} ] || { echo "❌ JAR file was not created"; exit 1; }

          # Validate file size
          ACTUAL_SIZE=$(stat -f%z ${{ env.JAR_FILE }} 2>/dev/null || stat -c%s ${{ env.JAR_FILE }} 2>/dev/null)
          EXPECTED_SIZE="${{ steps.validate-release.outputs.file_size }}"

          echo "File size validation: Expected $EXPECTED_SIZE bytes, Got $ACTUAL_SIZE bytes"

          if [ -n "$EXPECTED_SIZE" ] && [ "$EXPECTED_SIZE" -gt 0 ]; then
            SIZE_DIFF=$((ACTUAL_SIZE - EXPECTED_SIZE))
            [ ${SIZE_DIFF#-} -le 1000 ] && echo "✅ File size validation passed" || echo "⚠️  File size differs significantly"
          fi

      - name: Test JAR functionality
        if: steps.compare.outputs.needs_update == 'true'
        run: |
          echo "Testing PlantUML JAR functionality..."
          [ -f ${{ env.JAR_FILE }} ] || { echo "❌ JAR file not found"; exit 1; }

          # Test version command
          echo "Testing JAR execution..."
          if java -jar ${{ env.JAR_FILE }} -version 2>&1 | grep -q "PlantUML"; then
            echo "✅ PlantUML JAR is functional"
            java -jar ${{ env.JAR_FILE }} -version
          else
            echo "❌ JAR version check failed"
            exit 1
          fi

          # Test diagram generation
          echo "Testing diagram generation..."
          cat > ${{ env.TEST_DIAGRAM }} << 'EOF'
          @startuml
          Alice -> Bob: Hello
          @enduml
          EOF

          if java -jar ${{ env.JAR_FILE }} -tsvg ${{ env.TEST_DIAGRAM }}; then
            echo "✅ Diagram generation test passed"
            rm -f ${{ env.TEST_DIAGRAM }} ${TEST_DIAGRAM%.puml}.svg
          else
            echo "❌ Diagram generation test failed"
            rm -f ${{ env.TEST_DIAGRAM }} ${TEST_DIAGRAM%.puml}.svg
            exit 1
          fi

      - name: Clean up backups
        if: steps.compare.outputs.needs_update == 'true'
        run: |
          echo "Cleaning up backup files..."
          rm -f ${{ env.VERSION_FILE }}.backup ${{ env.JAR_FILE }}.backup

      - name: Create Pull Request
        if: steps.compare.outputs.needs_update == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            Update PlantUML to version ${{ steps.latest-version.outputs.version }}

            - Updated PLANTUML_JAR_VERSION to ${{ steps.latest-version.outputs.version }}
            - Downloaded new PlantUML JAR file (verified functional)
            - Incremented gem version to ${{ steps.update-files.outputs.new_gem_version }}

            Release: ${{ steps.latest-version.outputs.release_url }}
          title: "Update PlantUML to version ${{ steps.latest-version.outputs.version }}"
          body: |
            This PR updates PlantUML to the latest version **${{ steps.latest-version.outputs.version }}**.

            ## Changes Made
            - ✅ Updated `PLANTUML_JAR_VERSION` from `${{ steps.current-version.outputs.version }}` to `${{ steps.latest-version.outputs.version }}`
            - ✅ Downloaded and verified new PlantUML JAR file
            - ✅ Incremented gem version to `${{ steps.update-files.outputs.new_gem_version }}`
            - ✅ Validated JAR functionality with version check and diagram generation

            ## Release Information
            - **Release URL**: ${{ steps.latest-version.outputs.release_url }}
            - **Download URL**: ${{ steps.validate-release.outputs.download_url }}

            ## Validation
            - [x] Download URL is accessible
            - [x] JAR file downloads successfully
            - [x] JAR executes and shows correct version
            - [x] JAR can generate test diagrams

            ---
            *This update was created automatically by the PlantUML version sync workflow.*
          branch: update-plantuml-${{ steps.latest-version.outputs.version }}
          base: main
          labels: |
            enhancement
            automated
            plantuml-update

      - name: Restore backups on failure
        if: failure() && steps.compare.outputs.needs_update == 'true'
        run: |
          echo "Workflow failed, restoring backup files..."
          [ -f ${{ env.VERSION_FILE }}.backup ] && mv ${{ env.VERSION_FILE }}.backup ${{ env.VERSION_FILE }} && echo "Restored version.rb"
          [ -f ${{ env.JAR_FILE }}.backup ] && mv ${{ env.JAR_FILE }}.backup ${{ env.JAR_FILE }} && echo "Restored plantuml.jar"
